"use client";
import { Timestamp } from "firebase/firestore";
import { Schema } from "firebase/ai";

// Represents info about a single job ad submitted by a user
class jobAdObj {
    public companyName: string = "";
    public dateSubmitted: Timestamp = new Timestamp(0,0);
    public jobDescription: string = "";
    public jobTitle: string = "";
    // Used to associate generated resumes with job ads.
    // Should be set using a document reference.
    public jobID: string = "";
};

// Format of AI's response when parsing a user-submitted job ad
export const jobAdObjSchema = Schema.object({
    properties: {
        companyName: Schema.string({
            description: "The name of the company in the job ad.",
        }),
        // dateSubmitted timestamp should be generated by Cloud Firestore, not by AI
        jobTitle: Schema.string({
            description: "The job title of the job ad."
        }),
        jobDescription: Schema.string({
            description: "The full job description of the job ad."
        }),
        // jobID should be generated by Cloud Firestore, not by AI
    },
    required: ["companyName", "jobTitle", "jobDescription"],
});

// Represents info about a single job on the user's resume
class jobObj {
    public jobTitle: string = "";
    public company: string = "";
    public startDate: string = "";
    public endDate: string = "";
    public jobSummary: string = "";
    public responsibilities: string[] = [];
};

// Format of AI's response when parsing a single job from a user's uploaded resume
const jobObjSchema = Schema.object({
    properties: {
        jobTitle: Schema.string({
            description: "The title of the job."
        }),
        company: Schema.string({
            description: "The name of the company."
        }),
        startDate: Schema.string({
            description: "The start date of the job in YYYY-MM format."
        }),
        endDate: Schema.string({
            description: "The end date of the job, in YYYY-MM format or as the string \"Present\"."
        }),
        jobSummary: Schema.string({
            description: "The summary of the job role."
        }),
        responsibilities: Schema.array({
            description: "Bullet points of responsibilities and accomplishments.",
            items: Schema.string()
        }),
    },
    required: ["jobTitle", "company", "startDate", "endDate", "jobSummary", "responsibilities"],
});

// Represents info about a single academic credential on the user's resume
class eduObj {
    public degree: string = "";
    public institution: string = "";
    public startDate: string = "";
    public endDate: string = "";
    public gpa: string = "";
}

// Format of AI response when parsing a single educational credential from the user's uploaded resume
const eduObjSchema = Schema.object({
    properties: {
        degree: Schema.string({
            description: "The title of the degree (e.g., \"Bachelor of Science in Computer Science\")."
        }),
        institution: Schema.string({
            description: "The name of the school or university."
        }),
        startDate: Schema.string({
            description: "The start date of enrollment in YYYY-MM format."
        }),
        endDate: Schema.string({
            description: "The start date of enrollment in YYYY-MM format, or as the string \"Present\"."
        }),
        gpa: Schema.string({
            description: "The GPA. If not available, leave as an empty string."
        }),
    },
    required: ["degree", "institution", "startDate", "endDate", "gpa"],
});

// Represents contact info on a single user's resume
class contactObj {
    public email: string[] = [];
    public phone: string[] = [];
    public location: string = "";
}

// Format of AI response when parsing the user's contact info from their uploaded resume
const contactObjSchema = Schema.object({
    properties: {
        email: Schema.array({
            description: "A list of email addresses.",
            items: Schema.string(),
        }),
        phone: Schema.array({
            description: "A list of phone numbers in the format XXX-XXX-XXXX with X being a number from 0 to 9.",
            items: Schema.string(),
        }),
        location: Schema.string({
            description: "The city and state or country."
        }),
    },
    required: ["email", "phone", "location"],
});

// Used to store all the info parsed from the user's multiple resumes into a single profile
class resume {
    public fullName: string = "";
    public contact: contactObj = new contactObj;
    public summary: string = "";
    public workExperience: jobObj[] = [];
    public education: eduObj[] = [];
    public skills: string[] = [];
}

// Format of AI response when parsing all relevant fields from the user's uploaded resume
export const resumeSchema = Schema.object({
    properties: {
        fullName: Schema.string({
            description: "The person's full name on the resume."
        }),
        contact: contactObjSchema,
        summary: Schema.string({
            description: "Professional summary (1-2 paragraphs)."
        }),
        workExperience: Schema.array({
            description: "List of work experiences, ordered most recent first.",
            items: jobObjSchema
        }),
        education: Schema.array({
            description: "Educational qualifications, ordered by most recent first.",
            items: eduObjSchema
        }),
        skills: Schema.array({
            description: "List of skills.",
            items: Schema.string()
        }),
    },
    required: ["fullName", "contact", "summary", "workExperience", "education", "skills"],
});

// Represents a single generated resume by the AI
class generatedResume {
    public fullName: string = "";
    public contact: contactObj = new contactObj;
    public summary: string = "";
    public workExperience: jobObj[] = [];
    public education: eduObj[] = [];
    public skills: string[] = [];
    // Used to associate generated resumes with job ads.
    // Should be set using a document reference.
    public resumeID: string = "";
}

// Format of AI response when generating a new resume in JSON format
const generatedResumeSchema = Schema.object({
    properties: {
        fullName: Schema.string({
            description: "The person's full name on the resume."
        }),
        contact: contactObjSchema,
        summary: Schema.string({
            description: "Professional summary (1-2 paragraphs)."
        }),
        workExperience: Schema.array({
            description: "List of work experiences, ordered most recent first.",
            items: jobObjSchema
        }),
        education: Schema.array({
            description: "Educational qualifications, ordered by most recent first.",
            items: eduObjSchema
        }),
        skills: Schema.array({
            description: "List of skills.",
            items: Schema.string()
        }),
        // the resumeID should be generated by Cloud Firestore, not by the AI
    },
    required: ["fullName", "contact", "summary", "workExperience", "education", "skills"],
});

// For unstructured, biographical text submitted directly by the user.
class freeFormSubmission {
    public text: string = "";
    public label: string = "";
    public dateSubmitted: Timestamp = new Timestamp(0,0);
}

// The class which I intend to use directly.
export class userProfile {
    // theme property is used by src/context/themeContext.tsx
    theme: string = "system";
    freeFormText: freeFormSubmission[] = [];
    jobAds: jobAdObj[] = [];
    resumeFields: resume = new resume;
    generatedResumes: generatedResume[] = [];
}